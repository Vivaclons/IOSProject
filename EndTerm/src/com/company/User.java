package com.company;import com.company.ChainOfResponsibility.*;import com.company.Decorator.IUser;import com.company.State.*;import java.util.ArrayList;import java.util.List;public class User  implements  Aggregat{    @Override    public Iterator getIterator() {        return new TaskIterator();    }    private  class TaskIterator implements  Iterator{        int index = 0;        @Override        public boolean hasNext() {            if(index< basket.size()){                return  true;            }            return false;        }        @Override        public Object next() {            return basket.get(index++);        }    }    Activity activity;    private String name;    private double balance;    private  double totalSum;    private List<Product> basket = new ArrayList<>();    public User(String name, double balance, List<Product> basket) {        this.name = name;        this.balance = balance;        this.basket = basket;    }    public User() {    }    public double getTotalSum() {        return totalSum;    }    public void setTotalSum(double totalSum) {        this.totalSum = totalSum;    }    public double getBalance() {        return balance;    }    public void setBalance(double balance) {        this.balance = balance;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public List<Product> getBasket() {        return basket;    }    public void setBasket(List<Product> basket) {        this.basket = basket;    }    public void addProduct(Product product){        basket.add(product);    }    public  void  deleteProduct(Product product){        basket.remove(product);    }    public  double  allPrice(){        for (int i = 0; i <= basket.size() - 1; i++) {            totalSum = totalSum + basket.get(i).getPrice();        }        return totalSum;    }    public void setActivity(Activity activity) {        this.activity = activity;    }    public  void changeActivity(User user){        Notifier reportNotifier = new SimpleReportNotifier(Priority.ROUTINE);        Notifier emailNotifier = new EmailNotifier(Priority.IMPORTANT);        Notifier smsNotifier = new SMSNotifier(Priority.ASAP);        reportNotifier.setNextNotifier(emailNotifier);        emailNotifier.setNextNotifier(smsNotifier);        if(activity instanceof NewOrder){            reportNotifier.notifyManager("You do not have a problem", Priority.ROUTINE);            setActivity(new OrderConfirmed());        }else if(activity instanceof OrderConfirmed){            setActivity(new Invoiced());        }else if(activity instanceof Invoiced){            if(user.getBalance() >= user.allPrice()) {                setActivity(new Shipped());            }else if(user.getBalance() < user.allPrice()) {                setActivity(new Cancelled());                reportNotifier.notifyManager("You have lost everything(discharge), check balance ", Priority.ASAP);            }        }else if(activity instanceof Cancelled || activity instanceof Shipped){            setActivity(new NewOrder());//            reportNotifier.notifyManager("Something is wrong", Priority.IMPORTANT);        }    }    public void sendProduct(){        activity.sendProduct(this);    }    @Override    public String toString() {        return "User{" +                "activity=" + activity +                ", name='" + name + '\'' +                ", balance=" + balance +                ", totalSum=" + totalSum +                ", basket=" + basket +                '}';    }}